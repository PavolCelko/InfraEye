#include <Adafruit_GFX.h>
#include <Adafruit_ILI9341.h>
#include "module_LCD.h"
#include "config.h"

const uint16_t colorPalete[] = {0x1,0x2,0x3,0x4,0x5,0x5,0x6,0x6,0x7,0x7,0x8,0x8,0x9,0x9,0xa,0xa,0xa,0xb,0xb,0xb,0xc,0xc,0xc,0xc,0xd,0x80d,0x80d,0x80e,0x80e,0x80e,0x80e,0x80e,0x80e,0x100f,0x100f,0x100f,0x100f,0x100f,0x180f,0x1810,0x1810,0x1810,0x2010,0x2010,0x2010,0x2010,0x2811,0x2811,0x2811,0x2811,0x3011,0x3011,0x3011,0x3011,0x3811,0x3812,0x3812,0x3812,0x3812,0x3812,0x4012,0x4012,0x4012,0x4012,0x4012,0x4812,0x4812,0x4812,0x4812,0x4812,0x5012,0x5013,0x5013,0x5013,0x5813,0x5813,0x5813,0x5813,0x5813,0x6013,0x6013,0x6013,0x6013,0x6813,0x6813,0x6813,0x6813,0x6813,0x7013,0x7013,0x7013,0x7013,0x7013,0x7813,0x7813,0x7813,0x7813,0x7813,0x8013,0x8013,0x8013,0x8013,0x8013,0x8813,0x8813,0x8813,0x8813,0x8813,0x9013,0x9013,0x9013,0x9013,0x9813,0x9813,0x9813,0x9813,0x9813,0x9813,0xa013,0xa013,0xa013,0xa013,0xa013,0xa013,0xa813,0xa813,0xa813,0xa813,0xa813,0xa813,0xa813,0xb013,0xb013,0xb012,0xb012,0xb012,0xb012,0xb012,0xb012,0xb012,0xb812,0xb832,0xb832,0xb832,0xb832,0xb832,0xb832,0xb832,0xb832,0xb832,0xc032,0xc032,0xc052,0xc052,0xc051,0xc051,0xc051,0xc071,0xc071,0xc071,0xc071,0xc071,0xc891,0xc890,0xc890,0xc890,0xc890,0xc8b0,0xc8b0,0xc8b0,0xc8b0,0xc8cf,0xc8cf,0xc8cf,0xd0cf,0xd0cf,0xd0ee,0xd0ee,0xd0ee,0xd0ee,0xd10e,0xd10d,0xd10d,0xd10d,0xd12d,0xd12c,0xd12c,0xd92c,0xd94c,0xd94c,0xd94b,0xd96b,0xd96b,0xd96a,0xd96a,0xd98a,0xd989,0xd989,0xd988,0xd9a8,0xd9a8,0xd9a7,0xe1a7,0xe1c6,0xe1c6,0xe1c6,0xe1c5,0xe1e5,0xe1e4,0xe1e4,0xe1e4,0xe203,0xe203,0xe203,0xe223,0xe223,0xe222,0xe222,0xe242,0xe242,0xea42,0xea62,0xea61,0xea61,0xea61,0xea61,0xea61,0xea81,0xea81,0xea81,0xea81,0xeaa1,0xeaa1,0xeaa1,0xeac1,0xeac0,0xeac0,0xeac0,0xeae0,0xeae0,0xeae0,0xeae0,0xeae0,0xeb00,0xeb00,0xeb00,0xf300,0xf320,0xf320,0xf320,0xf320,0xf320,0xf340,0xf340,0xf340,0xf340,0xf340,0xf360,0xf360,0xf360,0xf360,0xf380,0xf380,0xf380,0xf380,0xf3a0,0xf3a0,0xf3a0,0xf3a0,0xf3c0,0xf3c0,0xf3c0,0xf3e0,0xf3e0,0xf3e0,0xf400,0xf400,0xf400,0xf400,0xf420,0xf420,0xf420,0xfc20,0xfc40,0xfc40,0xfc40,0xfc40,0xfc40,0xfc60,0xfc60,0xfc60,0xfc60,0xfc60,0xfc80,0xfc80,0xfc80,0xfc80,0xfca0,0xfca0,0xfca0,0xfcc0,0xfcc0,0xfcc0,0xfce0,0xfce0,0xfce0,0xfd00,0xfd00,0xfd00,0xfd00,0xfd20,0xfd20,0xfd20,0xfd40,0xfd40,0xfd40,0xfd60,0xfd60,0xfd60,0xfd60,0xfd80,0xfd80,0xfd80,0xfd80,0xfda0,0xfda0,0xfda0,0xfdc0,0xfdc0,0xfdc0,0xfdc0,0xfdc0,0xfde0,0xfde0,0xfde0,0xfe00,0xfe00,0xfe00,0xfe00,0xfe20,0xfe20,0xfe20,0xfe20,0xfe40,0xfe40,0xfe40,0xfe40,0xfe40,0xfe60,0xfe60,0xfe60,0xfe60,0xfe60,0xfe80,0xfe80,0xfe81,0xfea1,0xfea1,0xfea1,0xfea1,0xfec1,0xfec1,0xfec1,0xfec1,0xfec2,0xfee2,0xfee2,0xfee2,0xfee3,0xfee3,0xfee3,0xff04,0xff04,0xff04,0xff04,0xff05,0xff25,0xff25,0xff26,0xff26,0xff27,0xff27,0xff47,0xff48,0xff48,0xff49,0xff49,0xff6a,0xff6a,0xff6a,0xff6b,0xff6b,0xff6c,0xff6c,0xff8d,0xff8d,0xff8e,0xff8e,0xff8f,0xff90,0xff90,0xff91,0xff91,0xffb2,0xffb2,0xffb3,0xffb3,0xffb4,0xffb4,0xffb5,0xffb5,0xffb6,0xffb6,0xffd7,0xffd7,0xffd8,0xffd8,0xffd8,0xffd9,0xffd9,0xffda,0xffda,0xffdb,0xfffb,0xfffb,0xfffc,0xfffc,0xfffd,0xfffd,0xfffd,0xfffe,0xfffe,0xfffe};

Adafruit_ILI9341 tft = Adafruit_ILI9341(TFT_CS, TFT_DC);

void LCD_Init(void)
{
	tft.begin();
	tft.fillRect(0, 0, 240, 320, 0x00031);

}

void LCD_PrintStats(uint16_t x, uint16_t y, float max_t, float min_t, float FPS)
{
  static uint8_t first = 1;
  char str_temp[6];
  float constDegToScale;
  uint16_t colorIndex;

  if(first)
  {
    first = 0;
    tft.fillRect(x, y, 240, 120, 0x0000);
    tft.setTextColor(ILI9341_WHITE);
    tft.setTextSize(2);
    for(uint16_t i=0;i<240;i++)
    {
      constDegToScale = ((float)240 - (float)0) / ((float)403 - (float)1);
      colorIndex = (uint16_t)(((float)i) / constDegToScale);
      tft.fillRect(x+i, y, 1, 10, colorPalete[colorIndex]);
    }
  }  
  tft.setCursor(x, y+10);  
  dtostrf((double)min_t, 3, 0, str_temp);
  tft.fillRect(x, y+10, 50, 15, 0x0000);
  tft.printf("%sC", str_temp);
  tft.setCursor(x+180, y+10);
  dtostrf((double)max_t, 3, 0, str_temp);
  tft.fillRect(x+180, y+10, 50, 15, 0x0000);
  tft.printf("%sC", str_temp);
  dtostrf((double)FPS, 2, 1, str_temp);  
  tft.setCursor(x+0, y+100);
  tft.fillRect(x+0, y+100, 60, 15, 0x0000);
  tft.printf("%sFPS", str_temp);  
}

void LCD_drawImage(uint16_t *colorArray, uint16_t columns, uint16_t rows, uint16_t x0, uint16_t y0, uint8_t pixelSize, uint8_t debug)
{
  char str_temp[6];
  uint16_t x, y;
  //tft.fillRect(0, 0, 8, 8, 0xFFFF);
  for(uint16_t i=0;i<columns*rows;i++)
  {
    x = (columns-(i%columns));    
    y = (i/columns);
    
  //if((((subPage+i+(y%2))%2)==1))

      if(debug==1)
      {
        if((i%columns)==0)
        {
          Serial.printf("\n");
          wdt_reset();
        }
        //dtostrf(colorArray[i], 2, 0, str_temp);  
        //Serial.printf("%s;", str_temp);
        Serial.printf("%.2x;", colorArray[i]);
      }
      Serial.printf("|x%dy%dc%x| ", x, y, colorArray[i]);      
      if(pixelSize==1)
      {
        tft.drawPixel(x+x0, y+y0, colorArray[i]);
      }else
      {
        tft.fillRect(x*pixelSize+x0, y*pixelSize+y0, pixelSize, pixelSize, colorArray[i]);
      }
        
  }
}
  
void LCD_Convert(float *frameTemperature, uint16_t *frameColor, uint16_t frameSize,
  float minTemperature, float maxTemperature, uint8_t subPage)
{
  uint16_t i;
  //uint16_t constDegToScale;
  float constDegToScale;
  uint16_t colorIndex;
  uint16_t colorScaleSize = 403;

//  if(minTemperature>15) minTemperature = 15;
//  if(maxTemperature<50) maxTemperature = 50;
  
  constDegToScale = ((float)maxTemperature - (float)minTemperature) / ((float)colorScaleSize - (float)1);
//  Serial.printf("constDegToScale=%d maxTemperature=%d minTemperature=%d colorScaleSize=%d\n", (int)constDegToScale, maxTemperature, minTemperature, colorScaleSize);

  for(i = 0; i < frameSize; i++)
  {
    //if(((i/OUTPUT_ARRAY_LENGTH_D) % 2) == subPage)
    {
      if(frameTemperature[i] < minTemperature)
      {
        colorIndex = 0;
      }else if(frameTemperature[i] > maxTemperature)
      {
        colorIndex = colorScaleSize - 1;
      }else
      {
        colorIndex = (uint16_t)((frameTemperature[i] - (float)minTemperature) / constDegToScale);
      }      
      //Serial.printf("%.4x", (int)frameTemperature[i]);
      //if((i%32)==0)
      //{
      //  Serial.printf("\n");
      //  wdt_reset();
      //}
      frameColor[i] = colorPalete[colorIndex];
    }
  }
}

void LCD_Convert_u16(uint16_t *frameTemperature, uint16_t *frameColor, uint16_t frameSize,
  float minTemperature, float maxTemperature, uint8_t subPage)
{
  uint16_t i;
  //uint16_t constDegToScale;
  float constDegToScale;
  uint16_t colorIndex;
  uint16_t colorScaleSize = 403;

//  if(minTemperature>15) minTemperature = 15;
//  if(maxTemperature<50) maxTemperature = 50;
  
  constDegToScale = (maxTemperature - minTemperature) / ((float)colorScaleSize - (float)1);
//  Serial.printf("constDegToScale=%d maxTemperature=%d minTemperature=%d colorScaleSize=%d\n", (int)constDegToScale, maxTemperature, minTemperature, colorScaleSize);

  for(i = 0; i < frameSize; i++)
  {
    //if(((i/OUTPUT_ARRAY_LENGTH_D) % 2) == subPage)
    {
      if(frameTemperature[i] < minTemperature)
      {
        colorIndex = 0;
      }else if(frameTemperature[i] > maxTemperature)
      {
        colorIndex = colorScaleSize - 1;
      }else
      {
        colorIndex = (uint16_t)(((float)frameTemperature[i] - (float)minTemperature) / constDegToScale);
      }      
      //Serial.printf("%.4x", (int)frameTemperature[i]);
      //if((i%32)==0)
      //{
      //  Serial.printf("\n");
      //  wdt_reset();
      //}
      frameColor[i] = colorPalete[colorIndex];
    }
  }
}

void LCD_FillRect(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
	tft.fillRect(x, y, width, height, color);
}

